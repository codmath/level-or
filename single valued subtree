int solve(Node *root, int &count){
    if(root==NULL){
            return 1;
        }
        
        int ls=solve(root->left, count);
        int rs=solve(root->right, count);
        if(ls==1&&rs==1){
            if(root->left!=NULL&&root->right!=NULL &&root->left->data==root->data&&root->right->data==root->data){
                count++;
                return 1;
            }
            else if(root->left!=NULL && root->right==NULL&& root->left->data==root->data){
                count++;
                return 1;
            }
            else if(root->right!=NULL && root->left==NULL&& root->right->data==root->data){
                count++;
                return 1;
            }
            else if(root->left==NULL && root->right==NULL){
                count++;
                return 1;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
        
}
class Solution
{
    public:
    int singlevalued(Node *root)
    {
        int count=0;
        solve(root,count);
        return count;
        
    }
    
};
