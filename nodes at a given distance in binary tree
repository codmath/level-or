void mark_parent(Node*root, Node * target, unordered_map<Node*, Node*>&parent_track){
    queue<Node*>q;
    q.push(root);
    while(!q.empty()){
        int size=q.size();
        for(int i=0; i<q.size(); i++){
            Node *current=q.front();
            q.pop();
            if(current->left){
                parent_track[current->left]=current;
                q.push(current->left);
            }
            if(current->right){
                parent_track[current->right]=current;
                q.push(current->right);
            }
        }
    }
    
}

    vector <int> KDistanceNodes(Node* root, Node*  target , int k)
    {
        // return the sorted vector of all nodes at k dist
        unordered_map<Node*, Node*>parent_track;
        mark_parent(root, target, parent_track);
        unordered_map<Node*, bool> visited;
        queue<Node*>q;
        q.push(target);
        visited[target]=true;
        int check=0;
        while(!q.empty()){
            int size=q.size();
            if(check==k) break;
            check++;
            for(int i=0; i<q.size(); i++){
                Node *curr=q.front();
                q.pop();
                if(curr->left&&!visited[curr->left]){
                    q.push(curr->left);
                    visited[curr->left]=true;
                }
                if(curr->right&&!visited[curr->right]){
                    q.push(curr->right);
                    visited[curr->right]=true;
                }
                if(parent_track[curr]&&!visited[curr]){
                    q.push(curr);
                    visited[curr]=true;
                }
            }
        }
        vector<int> ans;
        while(!q.empty()){
            Node *node=q.front();
            q.pop();
            ans.push_back(node->data);
        }
        return ans;
    }
