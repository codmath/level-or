class Solution {
  public:
  int help(map<Node*, Node*>mpp, Node* tar)
  {
      map<Node*, int> visited;
      queue<Node*> q;
      q.push(tar);
      visited[tar]=1;
      int maxi=0;
      while(!q.empty()){
          int size=q.size();
          int fl=0;
          for(int i=1; i<=size; i++){
              Node *curr=q.front();
              q.pop();
              if(curr->left&&!visited[curr->left]){
                  fl=1;
                  visited[curr->left]=1;
                  q.push(curr->left);
              }
              if(curr->right&&!visited[curr->right]){
                  fl=1;
                  visited[curr->right]=1;
                  q.push(curr->right);
              }
              if(mpp[curr]&&!visited[mpp[curr]]){
                  fl=1;
                  visited[mpp[curr]]=1;
                  q.push(mpp[curr]);
              }
          }
              if(fl) maxi++;
          }
         
        return maxi;  
      }
  }
  Node* Map_parent(Node* root, int target, map<Node*, Node*> &mpp){
      queue<Node*>q;
      q.push(root);
      Node* res;
      while(!q.empty()){
          Node* node=q.front();
          if(node->data==target) res=node;
          q.pop();
          if(node->left){
              mpp[node->left]=node;
              q.push(node->left);
          }
          if(node->right){
              mpp[node->right]=node;
              q.push(node->right);
          }
      }
      return res;
      
  }
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        map<Node*, Node*> mpp;
        int ans;
        Node* tar=Map_parent(root, target, mpp);
        ans=help(mpp, tar);
        return ans; 
    }
